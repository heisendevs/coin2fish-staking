{
  "language": "Solidity",
  "sources": {
    "./Coin2FishStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport \"./IStakingPlatform.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title Coin2Fish Contract for Coin2Fish Reborn Token\n * @author HeisenDev\n */\ncontract Coin2FishRebornStaking is IStakingPlatform, Ownable {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable token = IERC20(0x965eDD6B429B664082ce56FF31632446FF562d03);\n\n    uint8 public immutable fixedAPY;\n\n    uint public immutable stakingDuration;\n    uint public immutable lockupDuration;\n    uint public immutable stakingMax;\n\n    uint public startPeriod;\n    uint public lockupPeriod;\n    uint public endPeriod;\n\n    uint private _totalStaked;\n    uint internal _precision = 1E6;\n\n    mapping(address => uint) public staked;\n    mapping(address => uint) private _rewardsToClaim;\n    mapping(address => uint) private _userStartTime;\n\n    /**\n     * @notice constructor contains all the parameters of the staking platform\n     * @dev all parameters are immutable\n     */\n    constructor(\n        uint8 _fixedAPY,\n        uint _durationInDays,\n        uint _lockDurationInDays,\n        uint _maxAmountStaked\n    ) {\n        stakingDuration = _durationInDays * 1 days;\n        lockupDuration = _lockDurationInDays * 1 days;\n        fixedAPY = _fixedAPY;\n        stakingMax = _maxAmountStaked;\n    }\n\n    /**\n     * @notice function that start the staking\n     * @dev set `startPeriod` to the current current `block.timestamp`\n     * set `lockupPeriod` which is `block.timestamp` + `lockupDuration`\n     * and `endPeriod` which is `startPeriod` + `stakingDuration`\n     */\n    function startStaking() external override onlyOwner {\n        require(startPeriod == 0, \"Staking has already started\");\n        startPeriod = block.timestamp;\n        lockupPeriod = block.timestamp + lockupDuration;\n        endPeriod = block.timestamp + stakingDuration;\n        emit StartStaking(startPeriod, lockupDuration, endPeriod);\n    }\n\n    /**\n     * @notice function that allows a user to deposit tokens\n     * @dev user must first approve the amount to deposit before calling this function,\n     * cannot exceed the `maxAmountStaked`\n     * @param amount, the amount to be deposited\n     * @dev `endPeriod` to equal 0 (Staking didn't started yet),\n     * or `endPeriod` more than current `block.timestamp` (staking not finished yet)\n     * @dev `totalStaked + amount` must be less than `stakingMax`\n     * @dev that the amount deposited should greater than 0\n     */\n    function deposit(uint amount) external override {\n        require(\n            endPeriod == 0 || endPeriod > block.timestamp,\n            \"Staking period ended\"\n        );\n        require(\n            _totalStaked + amount <= stakingMax,\n            \"Amount staked exceeds MaxStake\"\n        );\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        if (_userStartTime[_msgSender()] == 0) {\n            _userStartTime[_msgSender()] = block.timestamp;\n        }\n\n        _updateRewards();\n\n        staked[_msgSender()] += amount;\n        _totalStaked += amount;\n        token.safeTransferFrom(_msgSender(), address(this), amount);\n        emit Deposit(_msgSender(), amount);\n    }\n\n    /**\n     * @notice function that allows a user to withdraw its initial deposit\n     * @param amount, amount to withdraw\n     * @dev `block.timestamp` must be higher than `lockupPeriod` (lockupPeriod finished)\n     * @dev `amount` must be higher than `0`\n     * @dev `amount` must be lower or equal to the amount staked\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\n     * if rewards to claim\n     */\n    function withdraw(uint amount) external override {\n        require(\n            block.timestamp >= lockupPeriod,\n            \"No withdraw until lockup ends\"\n        );\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(\n            amount <= staked[_msgSender()],\n            \"Amount higher than stakedAmount\"\n        );\n\n        _updateRewards();\n        if (_rewardsToClaim[_msgSender()] > 0) {\n            _claimRewards();\n        }\n        _totalStaked -= amount;\n        staked[_msgSender()] -= amount;\n        token.safeTransfer(_msgSender(), amount);\n\n        emit Withdraw(_msgSender(), amount);\n    }\n\n    /**\n     * @notice function that allows a user to withdraw its initial deposit\n     * @dev must be called only when `block.timestamp` >= `lockupPeriod`\n     * @dev `block.timestamp` higher than `lockupPeriod` (lockupPeriod finished)\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\n     * if rewards to claim\n     */\n    function withdrawAll() external override {\n        require(\n            block.timestamp >= lockupPeriod,\n            \"No withdraw until lockup ends\"\n        );\n\n        _updateRewards();\n        if (_rewardsToClaim[_msgSender()] > 0) {\n            _claimRewards();\n        }\n\n        _userStartTime[_msgSender()] = 0;\n        _totalStaked -= staked[_msgSender()];\n        uint stakedBalance = staked[_msgSender()];\n        staked[_msgSender()] = 0;\n        token.safeTransfer(_msgSender(), stakedBalance);\n\n        emit Withdraw(_msgSender(), stakedBalance);\n    }\n\n    /**\n     * @notice claim all remaining balance on the contract\n     * Residual balance is all the remaining tokens that have not been distributed\n     * (e.g, in case the number of stakeholders is not sufficient)\n     * @dev Can only be called one year after the end of the staking period\n     * Cannot claim initial stakeholders deposit\n     */\n    function withdrawResidualBalance() external onlyOwner {\n        require(\n            block.timestamp >= endPeriod + (365 * 1 days),\n            \"Withdraw 1year after endPeriod\"\n        );\n\n        uint balance = token.balanceOf(address(this));\n        uint residualBalance = balance - (_totalStaked);\n        require(residualBalance > 0, \"No residual Balance to withdraw\");\n        token.safeTransfer(owner(), residualBalance);\n    }\n\n    /**\n     * @notice function that returns the amount of total Staked tokens\n     * for a specific user\n     * @param stakeHolder, address of the user to check\n     * @return uint amount of the total deposited Tokens by the caller\n     */\n    function amountStaked(address stakeHolder)\n    external\n    view\n    override\n    returns (uint)\n    {\n        return staked[stakeHolder];\n    }\n\n    /**\n     * @notice function that returns the amount of total Staked tokens\n     * on the smart contract\n     * @return uint amount of the total deposited Tokens\n     */\n    function totalDeposited() external view override returns (uint) {\n        return _totalStaked;\n    }\n\n    /**\n     * @notice function that returns the amount of pending rewards\n     * that can be claimed by the user\n     * @param stakeHolder, address of the user to be checked\n     * @return uint amount of claimable rewards\n     */\n    function rewardOf(address stakeHolder)\n    external\n    view\n    override\n    returns (uint)\n    {\n        return _calculateRewards(stakeHolder);\n    }\n\n    /**\n     * @notice function that claims pending rewards\n     * @dev transfer the pending rewards to the `msg.sender`\n     */\n    function claimRewards() external override {\n        _claimRewards();\n    }\n\n    /**\n     * @notice calculate rewards based on the `fixedAPY`, `_percentageTimeRemaining()`\n     * @dev the higher is the precision and the more the time remaining will be precise\n     * @param stakeHolder, address of the user to be checked\n     * @return uint amount of claimable tokens of the specified address\n     */\n    function _calculateRewards(address stakeHolder)\n    internal\n    view\n    returns (uint)\n    {\n        if (startPeriod == 0 || staked[stakeHolder] == 0) {\n            return 0;\n        }\n\n        return\n        (((staked[stakeHolder] * fixedAPY) *\n        _percentageTimeRemaining(stakeHolder)) / (_precision * 100)) +\n        _rewardsToClaim[stakeHolder];\n    }\n\n    /**\n     * @notice function that returns the remaining time in seconds of the staking period\n     * @dev the higher is the precision and the more the time remaining will be precise\n     * @param stakeHolder, address of the user to be checked\n     * @return uint percentage of time remaining * precision\n     */\n    function _percentageTimeRemaining(address stakeHolder)\n    internal\n    view\n    returns (uint)\n    {\n        bool early = startPeriod > _userStartTime[stakeHolder];\n        uint startTime;\n        if (endPeriod > block.timestamp) {\n            startTime = early ? startPeriod : _userStartTime[stakeHolder];\n            uint timeRemaining = stakingDuration -\n            (block.timestamp - startTime);\n            return\n            (_precision * (stakingDuration - timeRemaining)) /\n            stakingDuration;\n        }\n        startTime = early\n        ? 0\n        : stakingDuration - (endPeriod - _userStartTime[stakeHolder]);\n        return (_precision * (stakingDuration - startTime)) / stakingDuration;\n    }\n\n    /**\n     * @notice internal function that claims pending rewards\n     * @dev transfer the pending rewards to the user address\n     */\n    function _claimRewards() private {\n        _updateRewards();\n\n        uint rewardsToClaim = _rewardsToClaim[_msgSender()];\n        require(rewardsToClaim > 0, \"Nothing to claim\");\n\n        _rewardsToClaim[_msgSender()] = 0;\n        token.safeTransfer(_msgSender(), rewardsToClaim);\n        emit Claim(_msgSender(), rewardsToClaim);\n    }\n\n    /**\n     * @notice function that update pending rewards\n     * and shift them to rewardsToClaim\n     * @dev update rewards claimable\n     * and check the time spent since deposit for the `msg.sender`\n     */\n    function _updateRewards() private {\n        _rewardsToClaim[_msgSender()] = _calculateRewards(_msgSender());\n        _userStartTime[_msgSender()] = (block.timestamp >= endPeriod)\n        ? endPeriod\n        : block.timestamp;\n    }\n}\n"
    },
    "./IStakingPlatform.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\n/// @author RetreebInc\n/// @title Interface Staking Platform with fixed APY and lockup\ninterface IStakingPlatform {\n    /**\n     * @notice function that start the staking\n     * @dev set `startPeriod` to the current current `block.timestamp`\n     * set `lockupPeriod` which is `block.timestamp` + `lockupDuration`\n     * and `endPeriod` which is `startPeriod` + `stakingDuration`\n     */\n    function startStaking() external;\n\n    /**\n     * @notice function that allows a user to deposit tokens\n     * @dev user must first approve the amount to deposit before calling this function,\n     * cannot exceed the `maxAmountStaked`\n     * @param amount, the amount to be deposited\n     * @dev `endPeriod` to equal 0 (Staking didn't started yet),\n     * or `endPeriod` more than current `block.timestamp` (staking not finished yet)\n     * @dev `totalStaked + amount` must be less than `stakingMax`\n     * @dev that the amount deposited should greater than 0\n     */\n    function deposit(uint amount) external;\n\n    /**\n     * @notice function that allows a user to withdraw its initial deposit\n     * @dev must be called only when `block.timestamp` >= `endPeriod`\n     * @dev `block.timestamp` higher than `lockupPeriod` (lockupPeriod finished)\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\n     * if rewards to claim\n     */\n    function withdrawAll() external;\n\n    /**\n     * @notice function that allows a user to withdraw its initial deposit\n     * @param amount, amount to withdraw\n     * @dev `block.timestamp` must be higher than `lockupPeriod` (lockupPeriod finished)\n     * @dev `amount` must be higher than `0`\n     * @dev `amount` must be lower or equal to the amount staked\n     * withdraw reset all states variable for the `msg.sender` to 0, and claim rewards\n     * if rewards to claim\n     */\n    function withdraw(uint amount) external;\n\n    /**\n     * @notice function that returns the amount of total Staked tokens\n     * for a specific user\n     * @param stakeHolder, address of the user to check\n     * @return uint amount of the total deposited Tokens by the caller\n     */\n    function amountStaked(address stakeHolder) external view returns (uint);\n\n    /**\n     * @notice function that returns the amount of total Staked tokens\n     * on the smart contract\n     * @return uint amount of the total deposited Tokens\n     */\n    function totalDeposited() external view returns (uint);\n\n    /**\n     * @notice function that returns the amount of pending rewards\n     * that can be claimed by the user\n     * @param stakeHolder, address of the user to be checked\n     * @return uint amount of claimable rewards\n     */\n    function rewardOf(address stakeHolder) external view returns (uint);\n\n    /**\n     * @notice function that claims pending rewards\n     * @dev transfer the pending rewards to the `msg.sender`\n     */\n    function claimRewards() external;\n\n    /**\n     * @dev Emitted when `amount` tokens are deposited into\n     * staking platform\n     */\n    event Deposit(address indexed owner, uint amount);\n\n    /**\n     * @dev Emitted when user withdraw deposited `amount`\n     */\n    event Withdraw(address indexed owner, uint amount);\n\n    /**\n     * @dev Emitted when `stakeHolder` claim rewards\n     */\n    event Claim(address indexed stakeHolder, uint amount);\n\n    /**\n     * @dev Emitted when staking has started\n     */\n    event StartStaking(uint startPeriod, uint lockupPeriod, uint endingPeriod);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": ["ast"],
        "*": ["abi", "metadata", "devdoc", "userdoc", "storageLayout", "evm.legacyAssembly", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "evm.gasEstimates", "evm.assembly"]
      }
    },
    "evmVersion": "byzantium"
  }
}
